#[derive(Debug)]  // outer attribute to generate Debug trait
struct Rectangle {
    width: u32,
    height: u32
}

fn main() {
    let width = 50;
    let height = 30;
    println!("The rectangle's area is {}", calculate_area_separate_parameters(width, height));

    let dimensions = (50, 30);
    println!("Area is: {}", calculate_area_tuples(dimensions));

    // With struct
    let rect = Rectangle {
        width: 50,
        height: 30
    };

    println!("Area is: {}", calculate_area_struct(&rect));

    // Debug printing
    println!("rect is: {:?}", rect);  // {:?} uses Debug trait instead of Display
                                      // Debug trait is auto-generated by the derive directive
    println!("rect is: {:#?}", rect);  // {:#?} also prints debug but prettier (line breaks)
    dbg!(rect);  // prints src file and line, prints to stderr instead of stdout

    // Trick with dbg! is that it takes ownership of expression then returns it, so it can be
    // used like this
    let rect = Rectangle {
        width: dbg!(2*25),
        height: 30
    };

    dbg!(&rect);

}

fn calculate_area_separate_parameters(w: u32, h: u32) -> u32 {
    w * h
}

fn calculate_area_tuples(dimensions: (u32, u32)) -> u32 {
    dimensions.0 * dimensions.1
}

fn calculate_area_struct(rect: &Rectangle) -> u32 {
    rect.height * rect.width
}
